const moment = require('moment');

const mysql = require("mysql");
const bcrypt = require("bcrypt");
const dbConfig = require("../config/db.config");

// Create a connection to the database
const db = mysql.createConnection(dbConfig);

// Function to generate a random 6-digit number
function generateRandomNumber() {
  return Math.floor(100000 + Math.random() * 900000);
}

// Function to generate an autogenerated user ID
function generateAutogeneratedCode(firstName, lastName) {
  const randomDigits = generateRandomNumber();
  const randomSixDigitNumber = randomDigits.toString().padStart(6, '0');
  return `rt-${firstName.charAt(0).toLowerCase()}${lastName.charAt(0).toLowerCase()}-${randomSixDigitNumber}`;
}

// Export the sign-up function
exports.signUp = (req, res) => {
  const { firstName, lastName, email, password, phone, birthDate, userType } = req.body;

  // Format the birthDate to SQL date format (YYYY-MM-DD)
  const formattedBirthDate = moment(birthDate).format('YYYY-MM-DD');

  let autogeneratedCode = generateAutogeneratedCode(firstName, lastName);

  const checkQuery = "SELECT COUNT(*) AS count FROM users WHERE userId = ?";
  db.query(checkQuery, [autogeneratedCode], (checkError, checkResults) => {
    if (checkError) {
      return res.status(500).json({ success: false, message: "Error checking autogenerated code." });
    }

    if (checkResults[0].count > 0) {
      // If the autogenerated code already exists, regenerate it
      autogeneratedCode = generateAutogeneratedCode(firstName, lastName);
    }

    bcrypt.hash(password, 10, (err, hashedPassword) => {
      if (err) {
        return res.status(500).json({ success: false, message: "Error hashing password." });
      }

      const userQuery = "INSERT INTO users (userId, firstName, lastName, email, password, phone, birthDate, userType) VALUES ?";
      const userValues = [
        [autogeneratedCode, firstName, lastName, email, hashedPassword, phone, formattedBirthDate, userType]
      ];

      db.query(userQuery, [userValues], (userError, userResults) => {
        if (userError) {
          console.error("Error registering user:", userError);
          return res.status(500).json({ success: false, message: "Error registering user." });
        }

        // Insert into tenants or landlords table based on userType
        if (userType === "tenant" || userType === "landlord") {
          const table = userType === "tenant" ? "tenants" : "landlords";
          const roleQuery = `INSERT INTO ${table} (userId, firstName, lastName, email, phone) VALUES ?`;
          const roleValues = [
            [autogeneratedCode, firstName, lastName, email, phone]
          ];

          db.query(roleQuery, [roleValues], (roleError, roleResults) => {
            if (roleError) {
              console.error(`Error registering ${userType}:`, roleError);
              return res.status(500).json({ partialSuccess: true, success: false, message: `User registered but ${userType} details failed.` });
            }
            res.status(200).json({ success: true, message: `User and ${userType} registered successfully.` });
          });
        } else {
          return res.status(400).json({ success: false, message: "Invalid userType provided." });
        }
      });
    });
  });
};
