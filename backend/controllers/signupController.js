const mysql = require("mysql");
const bcrypt = require("bcrypt");
const dbConfig = require("../config/db.config");

const db = mysql.createConnection(dbConfig);

function generateRandomNumber() {
  // Generate a random 6-digit number
  return Math.floor(100000 + Math.random() * 900000);
}

function generateAutogeneratedCode(firstName, lastName) {
  const randomDigits = generateRandomNumber();
  const randomSixDigitNumber = randomDigits.toString().padStart(6, '0');
  return `cz-${firstName.charAt(0).toLowerCase()}${lastName.charAt(0).toLowerCase()}-${randomSixDigitNumber}`;
}
exports.signUp = (req, res) => {
  const { firstName, lastName, email, password, phone, birthDate, userType } = req.body;

  let autogeneratedCode = generateAutogeneratedCode(firstName, lastName);

  // Check if the autogenerated code already exists
  const checkQuery = "SELECT COUNT(*) AS count FROM users WHERE userId = ?";
  db.query(checkQuery, [autogeneratedCode], (checkError, checkResults) => {
    if (checkError) {
      return res.status(500).json({ message: "Error checking autogenerated code." });
    }

    if (checkResults[0].count > 0) {
      // If the autogenerated code already exists, regenerate it
      autogeneratedCode = generateAutogeneratedCode(firstName, lastName);
    }

    bcrypt.hash(password, 10, (err, hashedPassword) => {
      if (err) {
        return res.status(500).json({ message: "Error hashing password." });
      }

      const userQuery = "INSERT INTO users (userId, firstName, lastName, email, password, phone, birthDate, userType) VALUES ?";
      const userValues = [
        [autogeneratedCode, firstName, lastName, email, hashedPassword, phone, birthDate, userType],
      ];

      db.query(userQuery, [userValues], (error, userResults) => {
        if (error) {
          console.error("Error registering user:", error); // Log error for user registration
          return res.status(500).json({ message: "Error registering user." });
        }

        // Insert into tenants table
        if (userType === "tenant") {
          const tenantQuery = "INSERT INTO tenants (userId, firstName, lastName, email, phone) VALUES ?";
          const tenantValues = [
            [autogeneratedCode, firstName, lastName, email, phone]
          ];

          db.query(tenantQuery, [tenantValues], (tenantError, tenantResults) => {
            if (tenantError) {
              console.error("Error registering tenant:", tenantError); // Log error for tenant registration
              return res.status(500).json({ message: "Error registering tenant." });
            }

            res.status(200).json({ message: "User and tenant registered successfully." });
          });
        } else if (userType === "landlord") {
          // Insert into landlords table
          const landlordQuery = "INSERT INTO landlords (userId, firstName, lastName, email, phone) VALUES ?";
          const landlordValues = [
            [autogeneratedCode, firstName, lastName, email, phone]
          ];
        
          db.query(landlordQuery, [landlordValues], (landlordError, landlordResults) => {
            if (landlordError) {
              console.error("Error registering landlord:", landlordError);
              return res.status(500).json({ message: "Error registering landlord." });
            }
        
            res.status(200).json({ message: "User and landlord registered successfully." });
          });
        } else {
          return res.status(400).json({ message: "Invalid userType." });
        }
      });
    });
  });
};
